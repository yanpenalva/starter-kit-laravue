#!/bin/bash
set -euo pipefail

start_time=$(date +%s)
echo "🔍 Executando pre-commit hook..."

current_branch=$(git rev-parse --abbrev-ref HEAD)

if [ "$current_branch" = "main" ]; then
    echo "🚫 Branch 'main' detectada. Pulando execução."
    exit 0
fi

staged_files=$(git diff --name-only --cached --diff-filter=d)

if [ -z "$staged_files" ]; then
    echo "🚫 Nenhum arquivo staged encontrado."
    exit 0
fi

container="starterkit-app"

check_container() {
    if ! docker exec -i "$container" true &>/dev/null; then
        echo "❌ Container '$container' não está rodando."
        exit 1
    fi
}

run_formatter() {
    local file="$1"
    if [ -f "$file" ]; then
        echo "✨ Formatando $file..."
        docker exec -i "$container" ./vendor/bin/pint "$file"
        git add "$file"
    fi
}

lint_js() {
    local js_files
    js_files=$(echo "$staged_files" | grep -E '\.(js|vue)$' || true)
    [ -z "$js_files" ] && return
    echo "🔍 Lintando arquivos JS/Vue..."
    docker exec -i "$container" npm run lint || {
        echo "❌ Lint JS/Vue falhou."
        exit 1
    }
}

run_phpstan() {
    echo "🔍 Executando PHPStan..."
    docker exec -i "$container" vendor/bin/phpstan analyse || {
        echo "❌ PHPStan falhou."
        exit 1
    }
}

run_tests() {
    local coverage_mode="$1"
    echo "🧪 Rodando testes ($coverage_mode)..."
    docker exec -i "$container" php artisan optimize:clear
    docker exec -i "$container" php artisan test --env=testing --parallel $coverage_mode || {
        echo "❌ Testes falharam."
        exit 1
    }
}

check_container

# Format PHP files
echo "$staged_files" | grep -E '\.php$' | while read -r file; do
    run_formatter "$file"
done

# Lint JS/Vue
lint_js

# PHPStan
run_phpstan

# Testes por branch
case "$current_branch" in
    hml)  run_tests "" ;;
    # main) exit 0 ;;
    *)    run_tests "--coverage" ;;
esac

end_time=$(date +%s)
echo "✅ Pre-commit finalizado com sucesso em $((end_time - start_time))s."
